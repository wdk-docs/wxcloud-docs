初始化
========

在小程序端开始使用云能力前，需先调用 wx.cloud.init 方法完成云能力初始化（注意小程序需先开通云服务，开通的方法是点击工具栏左上角的 “控制台” 按钮）。因此，如果要使用云能力，通常我们在小程序初始化时即调用这个方法。

wx.cloud.init 方法的定义如下：

.. code-block:: js

  function init(options): void

wx.cloud.init 方法接受一个可选的 options 参数，方法没有返回值。

options 参数定义了云开发的默认配置，该配置会作为之后调用其他所有云 API 的默认配置，options 提供的可选配置如下：

+-----------+----------------+------+---------+--------------------------------------------------------+
|   字段    |    数据类型    | 必填 | 默认值  |                          说明                          |
+===========+================+======+=========+========================================================+
| env       | string  object | 否   | default | 默认环境配置                                           |
|           |                |      |         | ，传入字符串形式的环境 ID 可以指定所有服务的默认环境， |
|           |                |      |         | 传入对象可以分别指定各个服务的默认环境，见下方详细定义 |
+-----------+----------------+------+---------+--------------------------------------------------------+
| traceUser | boolean        | 否   | false   | 是否在将用户访问记录到用户管理中，在控制台中可见       |
+-----------+----------------+------+---------+--------------------------------------------------------+

当 env 传入参数为对象时，可以指定各个服务的默认环境，可选字段如下：

+-----------+----------+------+---------+-------------------------+
|   字段    | 数据类型 | 必填 | 默认值  |          说明           |
+===========+==========+======+=========+=========================+
| database  | string   | 否   | default | 数据库 API 默认环境配置 |
+-----------+----------+------+---------+-------------------------+
| storage   | string   | 否   | default | 存储 API 默认环境配置   |
+-----------+----------+------+---------+-------------------------+
| functions | string   | 否   | default | 云函数 API 默认环境配置 |
+-----------+----------+------+---------+-------------------------+

示例代码：

.. code-block:: js

  wx.cloud.init({
    env: 'test-x1dzi'
  })

API 风格
云开发的 API 风格与框架组件和 API 风格一致，但同时支持回调风格和Promise风格。在传入 API 的 Object 参数中，如果传入了 success、fail、complete 字段，则我们认为是采用回调风格，API 方法调用不返回 Promise。如果传入 API 的 Object 参数中 success、fail、complete 这三个字段都不存在，则我们认为是采用Promise风格，API 方法调用返回一个 Promise，Promise resolve 的结果同传入 success 回调的参数，reject 的结果同传入 fail 的参数。

接下来我们分别看看如何使用数据库、存储和云函数。